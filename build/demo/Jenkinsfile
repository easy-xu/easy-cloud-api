pipeline {
    agent any
    stages {
        stage('检出') {
            steps {
                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.GIT_BUILD_REF]],
                          userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])
            }
        }
        stage('发布到 maven 制品库') {
            steps {
                withCredentials([
                        usernamePassword(
                                // CODING 持续集成的环境变量中内置了一个用于上传到当前项目制品库的凭证
                                credentialsId: env.CODING_ARTIFACTS_CREDENTIALS_ID,
                                usernameVariable: 'CODING_ARTIFACTS_USERNAME',
                                passwordVariable: 'CODING_ARTIFACTS_PASSWORD'
                        )]) {
                    withEnv([
                            "CODING_ARTIFACTS_USERNAME=${CODING_ARTIFACTS_USERNAME}",
                            "CODING_ARTIFACTS_PASSWORD=${CODING_ARTIFACTS_PASSWORD}"
                    ]) {
                        sh "mvn clean install -P ${env.PROFILE}"
                        sh 'mvn deploy -s ./maven/settings.xml'
                    }
                }
            }
        }
        stage('构建 Docker 镜像') {
            steps {
                //准备文件
                sh 'cp ${WORKSPACE_PATH}/cloud-service/dev-service/target/dev-service.jar ${WORKSPACE_PATH}/build/demo/application.jar'
                //构建镜像
                dir('./build/demo/') {
                    script {
                        //if (env.TAG_NAME ==~ /.*/) {
                        //    DOCKER_IMAGE_VERSION = "${env.TAG_NAME}"
                        //} else if (env.MR_SOURCE_BRANCH ==~ /.*/) {
                        //    DOCKER_IMAGE_VERSION = "mr-${env.MR_RESOURCE_ID}-${env.GIT_COMMIT_SHORT}"
                        //} else {
                        //    DOCKER_IMAGE_VERSION = "${env.BRANCH_NAME.replace('/', '-')}-${env.GIT_COMMIT_SHORT}"
                        //}
                        //简单的使用分支名作为镜像名称
                        DOCKER_IMAGE_VERSION = "${env.BRANCH_NAME.replace('/', '-')}"
                        // 注意：创建项目时链接标识不要使用下划线，而是连字符，比如 My Project 的标识应为 my-project
                        // 请修改 build/my-api 为你的制品库名称和镜像名称
                        CODING_DOCKER_IMAGE_NAME = "${env.PROJECT_NAME.toLowerCase()}/docker-default/easyxu-app"
                        // 本项目内的制品库已内置环境变量 CODING_ARTIFACTS_CREDENTIALS_ID，无需手动设置
                        docker.withRegistry("https://${env.CCI_CURRENT_TEAM}-docker.pkg.coding.net", "${env.CODING_ARTIFACTS_CREDENTIALS_ID}") {
                            docker.build("${CODING_DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}").push()
                        }
                    }
                }
            }
        }
    }
}
