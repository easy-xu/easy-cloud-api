plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

ext {
    moduleProjects = subprojects.findAll { it.name.startsWith("module-") }
    serviceProjects = subprojects.findAll { it.name.startsWith("service-") }
}

allprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    group 'easy.cloud'
    version '1.0-SNAPSHOT'

    repositories {
        maven { url 'https://easy-cloud.coding.net/public-artifacts/easy-cloud/maven-repo/packages' }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.3'
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.5.6'
        }
    }

    dependencies {
        //基础依赖
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        //持久层依赖
        implementation 'mysql:mysql-connector-java:8.0.25'
        implementation 'com.baomidou:mybatis-plus-boot-starter:3.4.3.4'
        compileOnly 'com.fasterxml.jackson.core:jackson-annotations:2.13.0'
        //服务层依赖
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
    }
}

def profile = System.getProperty("profile") ?: "dev"
def configPath = project.rootDir.getPath() + "/config/" + profile
def dockerParentPath = project.rootDir.getPath() + "/docker/"
def dockerFileTemp = dockerParentPath + 'Dockerfile'

configure(serviceProjects) { service ->
    def resourcesPath = projectDir.getPath() + '/build/resources/main'
    jar.doFirst {
        println 'copy config file: ' + configPath + '---->>>>' + resourcesPath
        copy {
            from configPath
            into resourcesPath
        }
    }

    def jarName = service.name + '-' + service.version + '.jar'
    def jarPath = projectDir.getPath() + '/build/libs/' + jarName
    def dockerPath = dockerParentPath + service.name + "/"
    jar.doLast {
        println 'copy jar file: ' + jarPath + '---->>>>' + dockerPath
        copy {
            from jarPath
            into dockerPath
        }

        def dockerFilePath = dockerPath + 'Dockerfile'
        def list = []
        new File(dockerFileTemp).withReader('UTF-8') { reader ->
            reader.eachLine {
                it = it.replace('${jar}', jarName)
                it = it.replace('${profile}', profile)
                list.add(it + '\r\n')
            }
        }
        println 'write Dockerfile: ' + dockerFilePath
        new File(dockerFilePath).withWriter('UTF-8') { writer ->
            list.each {
                writer.write(it)
            }
        }
    }

}


